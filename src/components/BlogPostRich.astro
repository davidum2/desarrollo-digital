---
import { getEntries } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import FormatterDate from './FormatterDate.astro';
import CardBlogRich from './CardBlogRich.astro';
import { Image } from 'astro:assets';
import CategorySelector from './CategorySelector.astro';
import SearchInput from './SearchInput.astro';
import LastPostCard from './LastPostCard.astro';
import type { BlogPostRich } from '../types'; // Ajusta la ruta según tu estructura

// Props tipados con BlogPostRich
interface Props extends BlogPostRich {}

const data = Astro.props as BlogPostRich;

// Convertir relatedPosts (string[]) a formato { collection, id }[]
const relatedEntries = data.relatedPosts.map((id) => ({
  collection: 'blogPostRich' as const,
  id,
}));
const relations = await getEntries(relatedEntries);

const keyword = data.keywords.join(', ');

const post = {
  title: data.title,
  author: data.author,
  datePublished: data.pubDate.toISOString(),
  description: data.description,
};

// Crear la estructura JSON-LD para BlogPosting
const jsonLd2 = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: post.title,
  author: {
    '@type': 'Person',
    name: post.author,
  },
  datePublished: post.datePublished,
  description: post.description,
};

// Crear la estructura JSON-LD para FAQPage
const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'FAQPage',
  mainEntity: data.faqs.map((faq) => ({
    '@type': 'Question',
    name: faq.question,
    acceptedAnswer: {
      '@type': 'Answer',
      text: faq.answer,
    },
  })),
};

const jsonStringLd = JSON.stringify(jsonLd, null, 2);
const jsonStringLd2 = JSON.stringify(jsonLd2, null, 2);
---

<Layout
  schema1={jsonStringLd}
  schema2={jsonStringLd2}
  robot="follow, index"
  title={data.title}
  description={data.description}
  keywords={keyword}
  image={data.image.url}
>
  <div
    transition:name={data.title}
    class="flex flex-col md:flex-row max-w-6xl m-auto mt-8 relative"
  >
    <div class="flex px-8 w-full md:w-2/3">
      <a
        class="mb-2 border border-light-accent2 dark:border-dark-accent1 rounded-2xl w-fit flex items-start justify-start p-2 space-x-2"
        href="/blog"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="text-gray-600 dark:text-gray-300"
        >
          <path d="M15 18l-6-6 6-6"></path>
        </svg>
        <span class="pe-4">Regresar</span>
      </a>
      <Image
        class="rounded-lg"
        src={data.image.url}
        alt={data.image.alt}
        height={520}
        width={1020}
      />
      <div class="flex text-sm">
        <span class="flex gap-4 my-4">
          <p>{data.author}</p>
          <FormatterDate date={data.pubDate} />
        </span>
      </div>
      <div class="prose mb-4">
        <slot />
      </div>
    </div>
    <div class="flex px-3 w-full md:w-1/3">
      <div class="md:sticky top-12 w-full h-fit">
        <!-- <SearchInput /> -->
        <h5>Puedes consultar nuestros últimas noticias</h5>
        <LastPostCard />
        <CategorySelector />
      </div>
    </div>
  </div>
  <div class="flex max-w-6xl flex-col m-auto my-10">
    <h2 class="font-libre text-center text-3xl mb-8">
      También te puede gustar:
    </h2>
    <div class="flex gap-4 md:flex-row flex-col m-auto px-2">
      {
        relations.map((relation) => (
          <CardBlogRich {...relation.data} slug={relation.id} /> // Cambia slug a id
        ))
      }
    </div>
  </div>
</Layout>
