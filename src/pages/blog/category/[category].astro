---
import type { GetStaticPaths } from 'astro';
import { getCollection } from 'astro:content';
import { getAllCategories } from '../../../utils/getAllCategories';
import CardBlog from '../../../components/CardBlog.astro';
import CardBlogRich from '../../../components/CardBlogRich.astro';
import ArticleList from '../../../layouts/ArticleList.astro';
import type { BlogPost } from '../../../types';
import type { BlogPostRich } from '../../../types';

// Tipado para las entradas de las colecciones
type BlogPostEntry = { id: string; data: BlogPost };
type BlogPostRichEntry = { id: string; data: BlogPostRich };

// Generación de rutas estáticas
export const getStaticPaths = (async (): Promise<
  { params: { category: string }; props: { category: string } }[]
> => {
  const categories = (await getAllCategories()).map((category: string) =>
    category.toLowerCase()
  );
  return categories.map((category) => ({
    params: { category },
    props: { category },
  }));
}) satisfies GetStaticPaths;

// Props tipados
interface Props {
  category: string;
}

const { category } = Astro.props as Props;

// Función de filtrado tipada
const filterByCategory = (
  data: BlogPost | BlogPostRich,
  category: string
): boolean =>
  data.categories.map((cat: string) => cat.toLowerCase()).includes(category);

// Filtrado de posts por categoría
const posts: BlogPostEntry[] = await getCollection('blog', ({ data }) =>
  filterByCategory(data, category)
);
const postsRich: BlogPostRichEntry[] = await getCollection(
  'blogPostRich',
  ({ data }) => filterByCategory(data, category)
);

// Clases compartidas para las grillas
const gridClasses =
  'grid place-items-center md:grid-cols-2 lg:grid-cols-3 gap-6 m-auto mb-6';
---

<ArticleList>
  <h1 class="font-libre text-3xl text-center">Nuestros Post más recientes</h1>
  <div class={gridClasses}>
    {postsRich.map((post) => <CardBlogRich {...post.data} slug={post.id} />)}
  </div>

  <h2 class="font-libre text-2xl text-center my-6">
    Otros temas dentro de la categoría
  </h2>
  <div class={gridClasses}>
    {posts.map((post) => <CardBlog {...post.data} slug={post.id} />)}
  </div>
</ArticleList>
